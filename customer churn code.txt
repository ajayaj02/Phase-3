import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import StandardScaler
import seaborn as sns
import matplotlib.pyplot as plt

# Sample Data (Replace with actual customer churn data)
# Columns: 'Age', 'Tenure', 'Service_Usage', 'Complaints', 'Contract_Type', 'Churned'
# Churned: 1 for churned, 0 for not churned

data = {
    'Age': [23, 45, 56, 34, 67, 45, 32, 40, 55, 60],
    'Tenure': [1, 2, 3, 4, 2, 5, 3, 4, 6, 7],
    'Service_Usage': [15, 30, 45, 50, 20, 55, 45, 40, 35, 50],
    'Complaints': [0, 1, 0, 1, 0, 0, 1, 1, 0, 1],
    'Contract_Type': ['Month-to-month', 'Year-to-year', 'Month-to-month', 'Year-to-year', 'Month-to-month', 
                      'Year-to-year', 'Month-to-month', 'Month-to-month', 'Year-to-year', 'Month-to-month'],
    'Churned': [1, 0, 0, 0, 1, 0, 1, 0, 0, 1]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Encoding categorical variables
df = pd.get_dummies(df, drop_first=True)

# Define the features (X) and the target (y)
X = df.drop('Churned', axis=1)  # Features (Age, Tenure, etc.)
y = df['Churned']  # Target variable (Churned or not)

# Scaling the data (important for models like Logistic Regression, SVM, etc.)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

# Initialize the Random Forest Classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model
model.fit(X_train, y_train)

# Make predictions using the trained model
y_pred = model.predict(X_test)

# Evaluate the model performance
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

# Visualize Feature Importance
features = X.columns
importances = model.feature_importances_
feature_importance = pd.DataFrame({'Feature': features, 'Importance': importances})
feature_importance = feature_importance.sort_values(by='Importance', ascending=False)

# Plot the feature importance
sns.barplot(x='Importance', y='Feature', data=feature_importance)
plt.title('Feature Importance in Customer Churn Prediction')
plt.show()